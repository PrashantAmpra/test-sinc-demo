var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "fs", "path", "../bootstrap"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const fs_1 = __importDefault(require("fs"));
    const path_1 = __importDefault(require("path"));
    const bootstrap_1 = require("../bootstrap");
    let envPath = path_1.default.join(process.cwd(), ".env");
    test('Credentials undefined when file is missing', async () => {
        // Removes any existing test env file from past tests
        if (fs_1.default.existsSync(envPath)) {
            fs_1.default.unlinkSync(envPath);
        }
        // Run init command (command being tested)
        await bootstrap_1.init();
        // Check "process" variables match expected results
        expect(process.env.SN_USER).toBeUndefined();
        expect(process.env.SN_PASSWORD).toBeUndefined();
        expect(process.env.SN_INSTANCE).toBeUndefined();
    });
    test('Credentials undefined when file is broken', async () => {
        // Sample Credential Data
        let t_user = "Tyler";
        let t_pass = "Edwards";
        let t_instance = "dev90755.service-now.com";
        // Create a faulty .env file
        fs_1.default.writeFile(envPath, 'SN_USR=' + t_user + ' \nSN_PASWORD' + t_pass + ' \nSN_INSTACE=' + t_instance, (err) => {
            if (err)
                throw err;
        });
        // Run init command (command being tested)
        await bootstrap_1.init();
        // Check "process" variables match expected results
        expect(process.env.SN_USER).toBeUndefined();
        expect(process.env.SN_PASSWORD).toBeUndefined();
        expect(process.env.SN_INSTANCE).toBeUndefined();
    });
    test('Credentials correct when file is correct', async () => {
        // Sample Credential Data
        let t_user = "Tyler";
        let t_pass = "Edwards";
        let t_instance = "dev90755.service-now.com";
        // Create a correct .env file
        fs_1.default.writeFile(envPath, 'SN_USER=' + t_user + ' \nSN_PASSWORD=' + t_pass + ' \nSN_INSTANCE=' + t_instance, (err) => {
            if (err)
                throw err;
        });
        // Run init command (command being tested)
        await bootstrap_1.init();
        // Check "process" variables match expected results
        expect(process.env.SN_USER).toEqual(t_user);
        expect(process.env.SN_PASSWORD).toEqual(t_pass);
        expect(process.env.SN_INSTANCE).toEqual(t_instance);
    });
    // Cleans up leftover files
    if (fs_1.default.existsSync(envPath)) {
        fs_1.default.unlinkSync(envPath);
    }
});
