"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function LocationUtils() {
  var getLocationForUser = function getLocationForUser(userId) {
    var userLocation = {
      liveLocation: {
        latitude: null,
        longitude: null
      }
    };
    var geoLocRec = new GlideRecord('x_nuvo_csd_user_geolocation');
    geoLocRec.addQuery('user', userId);
    geoLocRec.orderByDesc('sys_created_on');
    geoLocRec.setLimit(1);
    geoLocRec.query();

    if (geoLocRec.next()) {
      userLocation.liveLocation = {
        latitude: geoLocRec.getValue('latitude'),
        longitude: geoLocRec.getValue('longitude')
      };
    }

    return userLocation;
  };

  var getLocationsForUsers = function getLocationsForUsers(users) {
    return users.reduce(function (acc, userId) {
      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, userId, getLocationForUser(userId)));
    }, {});
  };

  return {
    getLocationsForUsers: getLocationsForUsers
  };
}