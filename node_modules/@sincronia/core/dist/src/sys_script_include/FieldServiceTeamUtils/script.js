"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FieldServiceTeamUtils = /*#__PURE__*/function () {
  function FieldServiceTeamUtils() {
    _classCallCheck(this, FieldServiceTeamUtils);
  }

  _createClass(FieldServiceTeamUtils, null, [{
    key: "doesTeamGroupExist",
    value: function doesTeamGroupExist(name) {
      var teamGr = new GlideRecord('sys_user_group');
      teamGr.addQuery('name', name);
      teamGr.query();

      if (teamGr.next()) {
        return true;
      }

      return false;
    }
  }, {
    key: "teamToGroupName",
    value: function teamToGroupName(name) {
      return "".concat(name, " - Nuvolo FSM");
    }
  }, {
    key: "deleteTeam",
    value: function deleteTeam(id, message) {
      var teamGr = new GlideRecord('x_nuvo_csd_field_service_team');

      if (teamGr.get(id)) {
        teamGr.deleteRecord();
      }

      gs.addErrorMessage(message);
    }
  }, {
    key: "createAndLinkGroup",
    value: function createAndLinkGroup(name, id) {
      var groupName = FieldServiceTeamUtils.teamToGroupName(name);

      if (FieldServiceTeamUtils.doesTeamGroupExist(groupName)) {
        FieldServiceTeamUtils.deleteTeam(id, gs.getMessage('CSD_DISP_TEAM_LINK_DUPLICATE'));
        return '';
      }

      var teamGr = new GlideRecord('sys_user_group');
      teamGr.newRecord();
      teamGr.setValue('name', groupName);
      var snGroup = teamGr.insert();
      var fsTeam = new GlideRecord('x_nuvo_csd_field_service_team');

      if (fsTeam.get(id)) {
        fsTeam.setValue('related_group', snGroup);
        fsTeam.update();
      }

      return snGroup;
    }
  }, {
    key: "updateLinkedGroup",
    value: function updateLinkedGroup(groupId, name) {
      var groupName = FieldServiceTeamUtils.teamToGroupName(name);
      var groupGr = new GlideRecord('sys_user_group');

      if (groupGr.get(groupId)) {
        groupGr.setValue('name', groupName);
        groupGr.update();
      }
    }
  }, {
    key: "deleteOrphanedMembers",
    value: function deleteOrphanedMembers(teamId) {
      var membersGr = new GlideRecord('x_nuvo_csd_field_service_team_member');
      membersGr.addQuery('team', teamId);
      membersGr.query();

      while (membersGr.next()) {
        membersGr.deleteRecord();
      }
    }
  }, {
    key: "deleteLinkedGroup",
    value: function deleteLinkedGroup(groupId, teamId) {
      FieldServiceTeamUtils.deleteOrphanedMembers(teamId);
      var groupGr = new GlideRecord('sys_user_group');

      if (groupGr.get(groupId)) {
        groupGr.deleteRecord();
      }
    }
  }, {
    key: "deleteLinkedGroupMember",
    value: function deleteLinkedGroupMember(groupId, member) {
      var memberGr = new GlideRecord('sys_user_grmember');
      memberGr.addQuery('group', groupId);
      memberGr.addQuery('user', member);
      memberGr.query();

      if (memberGr.next()) {
        memberGr.deleteRecord();
      }
    }
  }, {
    key: "deleteTeamMemberById",
    value: function deleteTeamMemberById(grmemberId) {
      var memberGr = new GlideRecord('sys_user_grmember');

      if (memberGr.get(grmemberId)) {
        memberGr.deleteRecord();
      }
    }
  }, {
    key: "getTeamInfoFromUser",
    value: function getTeamInfoFromUser(userId) {
      var teamInfo = {};
      var isAdmin = false;
      var role = new GlideRecord('sys_user_has_role');
      role.addEncodedQuery("user=".concat(userId, "^role.name=x_nuvo_csd.admin"));
      role.query();

      if (role.next()) {
        isAdmin = true;
      }

      var teamGr = new GlideRecord('x_nuvo_csd_field_service_team');
      teamGr.query();

      while (teamGr.next()) {
        var _teamGr$getValue;

        if (isAdmin || ((_teamGr$getValue = teamGr.getValue('team_access')) === null || _teamGr$getValue === void 0 ? void 0 : _teamGr$getValue.includes(userId))) {
          var teamId = teamGr.getValue('sys_id') || '';
          var teamName = teamGr.getValue('name') || '';
          teamInfo[teamId] = {
            name: teamName,
            members: []
          };
          var memberGr = new GlideRecord('x_nuvo_csd_field_service_team_member');
          memberGr.addQuery('team', teamGr.getValue('sys_id'));
          memberGr.query();

          while (memberGr.next()) {
            var member = memberGr.member.getRefRecord();
            var memberId = member.getValue('sys_id') || '';
            var memberName = member.getValue('name') || '';
            teamInfo[teamId].members.push({
              sys_id: memberId,
              name: memberName
            });
          }
        }
      }

      return teamInfo;
    }
  }]);

  return FieldServiceTeamUtils;
}();