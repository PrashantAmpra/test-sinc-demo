"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DispatchDataHelper = /*#__PURE__*/function () {
  function DispatchDataHelper() {
    _classCallCheck(this, DispatchDataHelper);

    _defineProperty(this, "APPOINTMENT_TABLE", 'x_nuvo_csd_appointment');
  }

  _createClass(DispatchDataHelper, [{
    key: "retrieveAppointment",
    value: function retrieveAppointment(workOrderID) {
      var apptGR = new GlideRecord(this.APPOINTMENT_TABLE);
      apptGR.addQuery('work_order', workOrderID);
      apptGR.addQuery('participant_table', 'sys_user');
      apptGR.addEncodedQuery('event_startISNOTEMPTY^event_endISNOTEMPTY');
      apptGR.query();

      if (apptGR.next()) {
        return apptGR;
      }

      return false;
    }
  }], [{
    key: "removeFromApptMap",
    value: function removeFromApptMap(table, sysId, apptID, map) {
      var newScheduleMap = _objectSpread({}, map);

      if (!(table in map)) return map;
      if (!(sysId in map[table])) return map;
      var participantSchedule = newScheduleMap[table][sysId];
      var eventList = participantSchedule.events || [];
      participantSchedule.events = eventList.filter(function (curEvent) {
        return curEvent.sys_id !== apptID;
      });
      return newScheduleMap;
    }
  }, {
    key: "roundToNearest",
    value: function roundToNearest(interval, num) {
      return Math.round(num / interval) * interval;
    }
  }]);

  return DispatchDataHelper;
}();