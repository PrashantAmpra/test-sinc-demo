"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function DispatchScheduleUtils() {
  var EVENT_TABLE = 'x_nuvo_csd_appointment';
  var apptStates = {
    REQUESTED: '100',
    ACCEPTED: '200',
    REJECTED: '300',
    COMPLETED: '400'
  };

  var setApptValues = function setApptValues(apptGR, values) {
    var keys = Object.keys(values);
    keys.forEach(function (field) {
      apptGR.setValue(field, values[field]);
    });
  };

  var copyApptValues = function copyApptValues(properties, sourceGR, destGR) {
    properties.forEach(function (property) {
      destGR.setValue(property, sourceGR.getValue(property));
    });
  };

  var getTravelTime = function getTravelTime(opts) {
    return DispatchScheduleChecker().getTravelTime(opts);
  };

  var parseLatLong = function parseLatLong() {
    var latlong = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var validLatLongRegExp = /-?\d+\.?\d+/;
    var validLatLong = latlong === null ? [null] : latlong.match(validLatLongRegExp) || ['0'];
    return validLatLong[0];
  };

  var isInvalidLatLong = function isInvalidLatLong(location) {
    var invalidLat = location.latitude === null || location.latitude === '0.0';
    var invalidLong = location.longitude === null || location.longitude === '0.0';

    if (invalidLat || invalidLong) {
      return true;
    }

    return false;
  };

  var checkForInvalidLatLong = function checkForInvalidLatLong(location) {
    var warning = isInvalidLatLong(location);
    var labels = [gs.getMessage('CSD_DISP_WARNING_NO_LATLONG')];
    return {
      warning: warning,
      labels: labels
    };
  };

  var traceSpaceToSite = function traceSpaceToSite(spaceId) {
    var spaceGr = new GlideRecord('x_nuvo_eam_space');

    if (!spaceGr.get(spaceId)) {
      throw new Error("Failed to get space: ".concat(spaceId));
    }

    if (spaceGr.getValue('location_level') === 'site') {
      return spaceGr;
    }

    return traceSpaceToSite(spaceGr.getValue('parent_reference') || '');
  };

  var getLocationFromWorkOrderGR = function getLocationFromWorkOrderGR(woGR) {
    try {
      if (woGR.getValue('asset_location') === 'asset') {
        var buildingGR = woGR.work_location.getRefRecord().floor.getRefRecord().building.getRefRecord();
        return {
          latitude: parseLatLong(buildingGR.getValue('latitude')),
          longitude: parseLatLong(buildingGR.getValue('longitude'))
        };
      }

      if (woGR.getValue('asset_location') === 'space') {
        var spaceId = woGR.getValue('space') || '';
        var siteSpaceGr = traceSpaceToSite(spaceId);
        var siteGr = new GlideRecord('x_nuvo_eam_building');
        var siteId = siteSpaceGr.getValue('site') || '';

        if (!siteGr.get(siteId)) {
          throw new Error('Failed to retrieve site record from space');
        }

        var loc = {
          latitude: parseLatLong(siteGr.getValue('latitude')),
          longitude: parseLatLong(siteGr.getValue('longitude'))
        };
        return loc;
      }

      return {
        latitude: null,
        longitude: null
      };
    } catch (e) {
      return {
        latitude: null,
        longitude: null
      };
    }
  };

  var getLocationFromWorkOrder = function getLocationFromWorkOrder(workOrder) {
    var woGR = new GlideRecord('x_nuvo_eam_work_order');
    woGR.get(workOrder);
    var dispatchableGr = new GlideRecord(woGR.getValue('sys_class_name') || '');
    dispatchableGr.get(woGR.getValue('sys_id') || '');
    return getLocationFromWorkOrderGR(dispatchableGr);
  };

  var getLocationFromAppt = function getLocationFromAppt(apptGR) {
    var latitude = parseLatLong(apptGR.getValue('latitude'));
    var longitude = parseLatLong(apptGR.getValue('longitude'));

    if (!latitude || latitude === '') {
      latitude = null;
    }

    if (!longitude || longitude === '') {
      longitude = null;
    }

    return {
      latitude: latitude,
      longitude: longitude
    };
  };

  var createChildAppts = function createChildAppts(parentID) {
    var apptGR = new GlideRecord(EVENT_TABLE);
    var gotten = apptGR.get(parentID);
    if (!gotten) return;
    var woGR = apptGR.work_order.getRefRecord();
    var extendedWoGr = new GlideRecord(woGR.getValue('sys_class_name') || '');

    if (!extendedWoGr.get(woGR.getValue('sys_id') || '') || extendedWoGr.getValue('asset_location') === 'space') {
      return;
    }

    var assetGR = extendedWoGr.asset.getRefRecord();
    var values = {
      participant: assetGR.getValue('sys_id') || '',
      participant_table: assetGR.getValue('sys_class_name') || '',
      parent: apptGR.getValue('sys_id') || '',
      fixed: 'true'
    };
    setApptValues(apptGR, values);
    apptGR.insert();
  };

  var checkForWarnings = function checkForWarnings(location) {
    var invalidLatLong = checkForInvalidLatLong(location);
    if (invalidLatLong.warning) return invalidLatLong;
    return {
      warning: false,
      labels: []
    };
  };

  var eventGRToEvent = function eventGRToEvent(eventGR) {
    var eventBase = x_nuvo_eam.ScheduleUtils.eventGRToEvent(eventGR);

    var dispatchEvent = _objectSpread(_objectSpread({}, eventBase), {}, {
      workOrder: '',
      location: {
        latitude: null,
        longitude: null
      },
      state: apptStates.ACCEPTED,
      fixed: true,
      warning: false,
      warningLabels: [],
      primaryLabel: '',
      secondaryLabel: ''
    });

    if (eventGR.getValue('sys_class_name') === EVENT_TABLE) {
      var apptGR = new GlideRecord(EVENT_TABLE);
      apptGR.get(eventGR.getValue('sys_id') || '');
      var primaryLabel = '';
      var secondaryLabel = '';
      var hasWO = !(apptGR.getValue('work_order') === null);

      if (!hasWO) {
        primaryLabel = apptGR.getValue('title') || '';
        secondaryLabel = apptGR.getElement('state').getDisplayValue();
      }

      var location = getLocationFromAppt(apptGR);

      var _checkForWarnings = checkForWarnings(location),
          warning = _checkForWarnings.warning,
          warningLabels = _checkForWarnings.labels;

      var nuvoProp = new x_nuvo_mobile.NuvoloProperties();

      if (hasWO) {
        var woGR = apptGR.work_order.getRefRecord();
        var primaryLabelProp = nuvoProp.getProperty('appointment_primary_display_field', 'Dispatch') || 'short_description';
        primaryLabel = woGR.getElement(primaryLabelProp).getDisplayValue();
        var secondaryLabelProp = nuvoProp.getProperty('appointment_secondary_display_field', 'Dispatch') || 'priority';
        secondaryLabel = woGR.getElement(secondaryLabelProp).getDisplayValue();
      }

      dispatchEvent = _objectSpread(_objectSpread({}, eventBase), {}, {
        workOrder: apptGR.getValue('work_order') || '',
        location: location,
        state: apptGR.getValue('state') || '',
        fixed: apptGR.getValue('fixed') === '1',
        warning: warning,
        warningLabels: warningLabels,
        primaryLabel: primaryLabel,
        secondaryLabel: secondaryLabel
      });
      var parent = apptGR.getValue('parent');

      if (parent && parent !== '') {
        dispatchEvent.parent = parent;
      }
    }

    return dispatchEvent;
  };

  var getEvents = function getEvents(opts) {
    var participant = opts.participant,
        rangeStart = opts.rangeStart,
        rangeEnd = opts.rangeEnd;
    var events = [];
    var eventGR = new GlideRecord('x_nuvo_csd_appointment');
    eventGR.addQuery('participant_table', participant.table);
    eventGR.addQuery('participant', participant.sys_id);
    eventGR.addQuery('state', '!=', apptStates.REJECTED);
    var startDateTime = x_nuvo_eam.DateUtils.UTCToSNDateTime(rangeStart);
    var endDateTime = x_nuvo_eam.DateUtils.UTCToSNDateTime(rangeEnd);
    var timeQueryChunks = ["event_end>=".concat(startDateTime, "^event_end<=").concat(endDateTime), "event_start>=".concat(startDateTime, "^event_start<=").concat(endDateTime)];
    var timeQuery = "".concat(timeQueryChunks.join('OR'), "^event_startISNOTEMPTY^event_endISNOTEMPTY");
    eventGR.addEncodedQuery(timeQuery);
    eventGR.orderBy('event_start');
    eventGR.query();

    while (eventGR.next()) {
      events.push(eventGRToEvent(eventGR));
    }

    return events;
  };

  var getSchedule = function getSchedule(opts) {
    var events = getEvents(opts);
    var schedule = {
      events: events
    };
    return schedule;
  };

  var updateChildAppts = function updateChildAppts(parentID) {
    var childGR = new GlideRecord(EVENT_TABLE);
    var parentGR = new GlideRecord(EVENT_TABLE);
    parentGR.get(parentID);
    childGR.addQuery('parent', parentID);
    childGR.query();
    var propertiesToCopy = ['event_start', 'event_end', 'state'];

    while (childGR.next()) {
      copyApptValues(propertiesToCopy, parentGR, childGR);
      childGR.update();
    }
  };

  var processChange = function processChange(appointment) {
    var apptGR = new GlideRecord(EVENT_TABLE);

    if (appointment.sys_id === undefined || appointment.sys_id === '-1') {
      apptGR.initialize(); // TODO:: Save needs to track participant table as well as id to track asset changes

      var values = {
        event_end: x_nuvo_eam.DateUtils.UTCToSNDateTime(appointment.end),
        event_start: x_nuvo_eam.DateUtils.UTCToSNDateTime(appointment.start),
        title: appointment.title,
        participant: appointment.participantId,
        participant_table: 'sys_user',
        work_order: appointment.workOrder
      };
      setApptValues(apptGR, values);
      var insertSuccess = apptGR.insert();

      if (!insertSuccess) {
        return gs.getMessage('CSD_DISP_SAVE_FAIL', [appointment.title, apptGR.getLastErrorMessage()]);
      }

      var apptID = insertSuccess;
      createChildAppts(apptID);
      return null;
    }

    if (!apptGR.get(appointment.sys_id)) {
      return gs.getMessage('CSD_DISP_SAVE_NO_RECORD', [appointment.title]);
    } // update appointment with new information


    if (appointment.participantId !== apptGR.getValue('participant')) {
      // TODO: create a new appointment and cancel the other one
      var _values = {
        participant: appointment.participantId,
        participant_table: 'sys_user',
        state: apptStates.REQUESTED
      };
      setApptValues(apptGR, _values);
    }

    var UTCStart = x_nuvo_eam.DateUtils.SNDateTimeToUTC(apptGR.getValue('event_start') || '');
    var UTCEnd = x_nuvo_eam.DateUtils.SNDateTimeToUTC(apptGR.getValue('event_end') || ''); // if start or end changes

    if (appointment.start !== UTCStart || appointment.end !== UTCEnd) {
      // set back to requested
      var _values2 = {
        event_end: x_nuvo_eam.DateUtils.UTCToSNDateTime(appointment.end),
        event_start: x_nuvo_eam.DateUtils.UTCToSNDateTime(appointment.start),
        state: apptStates.REQUESTED
      };
      setApptValues(apptGR, _values2);
    }

    var updateResult = apptGR.update();

    if (!updateResult) {
      return gs.getMessage('CSD_DISP_SAVE_FAIL', [appointment.title, apptGR.getLastErrorMessage()]);
    }

    updateChildAppts(appointment.sys_id);
    return null;
  };

  var saveScheduleChanges = function saveScheduleChanges(scheduleChangeMap) {
    var errors = [];
    Object.keys(scheduleChangeMap).forEach(function (appointmentId) {
      var appointment = scheduleChangeMap[appointmentId];
      var result = processChange(appointment);

      if (result) {
        errors.push(result);
      }
    });
    return errors;
  };

  var getSchedules = function getSchedules(opts) {
    var participants = opts.participants,
        rangeStart = opts.rangeStart,
        rangeEnd = opts.rangeEnd;
    var scheduleMap = {};

    for (var i = 0; i < participants.length; i += 1) {
      var participant = participants[i];

      if (!scheduleMap[participant.table]) {
        scheduleMap[participant.table] = {};
      }

      scheduleMap[participant.table][participant.sys_id] = getSchedule({
        participant: participant,
        rangeStart: rangeStart,
        rangeEnd: rangeEnd
      });
    }

    return scheduleMap;
  };

  return {
    apptStates: apptStates,
    getSchedule: getSchedule,
    getLocationFromWorkOrder: getLocationFromWorkOrder,
    getLocationFromWorkOrderGR: getLocationFromWorkOrderGR,
    checkForWarnings: checkForWarnings,
    getSchedules: getSchedules,
    getTravelTime: getTravelTime,
    saveScheduleChanges: saveScheduleChanges
  };
}