var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "inquirer", "./server", "./config", "./appUtils", "fs", "./Logger", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const inquirer_1 = __importDefault(require("inquirer"));
    const server_1 = require("./server");
    const config_1 = __importDefault(require("./config"));
    const AppUtils = __importStar(require("./appUtils"));
    const fs_1 = __importDefault(require("fs"));
    const fsp = fs_1.default.promises;
    const Logger_1 = require("./Logger");
    const path_1 = __importDefault(require("path"));
    async function startWizard() {
        let loginAnswers = await getLoginInfo();
        try {
            let { username: user, password, instance } = loginAnswers;
            let apps = await server_1.getAppList({ user, password, instance });
            await setupDotEnv(loginAnswers);
            let hasConfig = await checkConfig();
            if (!hasConfig) {
                Logger_1.logger.info("Generating config...");
                await writeDefaultConfig(hasConfig);
            }
            let man = config_1.default.getManifest(true);
            if (!man) {
                let selectedApp = await showAppList(apps);
                if (!selectedApp) {
                    return;
                }
                Logger_1.logger.info("Downloading app...");
                await downloadApp(loginAnswers, selectedApp);
            }
            Logger_1.logger.success("You are all set up 👍 Try running 'npx sinc dev' to begin development mode.");
            await config_1.default.loadConfigs();
        }
        catch (e) {
            Logger_1.logger.error("Failed to setup application. Check to see that your credentials are correct and you have the update set installed on your instance.");
            return;
        }
    }
    exports.startWizard = startWizard;
    async function getLoginInfo() {
        return await inquirer_1.default.prompt([
            {
                type: "input",
                name: "instance",
                message: "What instance would you like to connect to?(ex. test123.service-now.com)"
            },
            {
                type: "input",
                name: "username",
                message: "What is your username on that instance?"
            },
            {
                type: "password",
                name: "password",
                message: "What is your password on that instance?"
            }
        ]);
    }
    async function checkConfig() {
        try {
            let checkConfig = config_1.default.checkConfigPath();
            if (!checkConfig) {
                return false;
            }
            await fsp.access(checkConfig, fs_1.default.constants.F_OK);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    async function setupDotEnv(answers) {
        let data = `SN_USER=${answers.username}
SN_PASSWORD=${answers.password}
SN_INSTANCE=${answers.instance}
  `;
        process.env.SN_USER = answers.username;
        process.env.SN_PASSWORD = answers.password;
        process.env.SN_INSTANCE = answers.instance;
        try {
            await fsp.writeFile(config_1.default.getEnvPath(), data);
        }
        catch (e) {
            throw e;
        }
    }
    async function writeDefaultConfig(hasConfig) {
        try {
            let pth;
            if (hasConfig)
                pth = config_1.default.getConfigPath();
            else
                pth = path_1.default.join(process.cwd(), "sinc.config.js");
            if (pth) {
                await fsp.writeFile(pth, config_1.default.getDefaultConfigFile());
            }
        }
        catch (e) {
            throw e;
        }
    }
    async function showAppList(apps) {
        let appSelection = await inquirer_1.default.prompt([
            {
                type: "list",
                name: "app",
                message: "Which app would you like to work with?",
                choices: apps.map(app => {
                    return {
                        name: `${app.displayName}(${app.scope})`,
                        value: app.scope,
                        short: app.displayName
                    };
                })
            }
        ]);
        return appSelection.app;
    }
    async function downloadApp(answers, scope) {
        try {
            let { username: user, password, instance } = answers;
            let man = await server_1.getManifestWithFiles(scope, { user, password, instance });
            await AppUtils.processManifest(man);
        }
        catch (e) {
            Logger_1.logger.error(e.toString());
            throw new Error("Failed to download files!");
        }
    }
});
