var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./config", "dotenv"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const config_1 = __importDefault(require("./config"));
    const dotenv_1 = __importDefault(require("dotenv"));
    const t = async (name, action) => {
        console.info(name);
        const start = new Date();
        await action();
        const end = new Date();
        console.info(`took ${end.getTime() - start.getTime()} ms `);
    };
    const main = async () => {
        await config_1.default.loadConfigs();
        const path = config_1.default.getEnvPath();
        dotenv_1.default.config({
            path
        });
        // await t("original manifest process", async () => {
        //   return AppManager.processManifest(testManifest);
        // });
        // await t("new manifest process", async () => {
        //   return AppMan2.processManifest(testManifest);
        // });
        // await t("old reconcile", async () => {
        //   const res = await AppManager.determineMissing(testManifest);
        //   console.info(res);
        // });
        // await t("new reconcile", async () => {
        //   const res = await AppMan2.findMissingFiles(testManifest);
        //   console.info(res);
        // });
        // await t("appFilesInPath", async () => {
        //   const res = await AppMan2.getAppFilesInPath(ConfigManager.getSourcePath());
        //   console.info(AppMan2.groupAppFiles(res));
        // });
        // await t("pushing test", async () => {
        //   try {
        //     await AppMan2.pushFiles(ConfigManager.getSourcePath());
        //   } catch (e) {
        //     console.info(e);
        //   }
        // });
        // await t("retry test", async () => {
        //   const failOnX = (numTimes: number) => {
        //     let x = numTimes;
        //     const fail = async () => {
        //       if (x === 0) {
        //         return "TEST";
        //       }
        //       x--;
        //       throw new Error("FAILURE");
        //     };
        //     return fail;
        //   };
        //   const res = await retryOnFail(failOnX(2), 2, 50);
        //   console.info(res);
        // });
    };
    main();
});
