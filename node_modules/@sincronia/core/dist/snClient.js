var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "axios", "axios-rate-limit", "./genericUtils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const axios_1 = __importDefault(require("axios"));
    const axios_rate_limit_1 = __importDefault(require("axios-rate-limit"));
    const genericUtils_1 = require("./genericUtils");
    exports.retryOnErr = async (f, allowedRetries, msBetween = 0, onRetry) => {
        try {
            return await f();
        }
        catch (e) {
            const newRetries = allowedRetries - 1;
            if (newRetries <= 0) {
                throw e;
            }
            if (onRetry) {
                onRetry(newRetries);
            }
            await genericUtils_1.wait(msBetween);
            return exports.retryOnErr(f, newRetries, msBetween, onRetry);
        }
    };
    exports.processPushResponse = (response, recSummary) => {
        const { status } = response;
        if (status === 404) {
            return {
                success: false,
                message: `Could not find ${recSummary} on the server.`
            };
        }
        if (status < 200 || status > 299) {
            return {
                success: false,
                message: `Failed to push ${recSummary}. Recieved an unexpected response (${status})`
            };
        }
        return {
            success: true,
            message: `${recSummary} pushed successfully!`
        };
    };
    exports.snClient = (baseURL, username, password) => {
        const client = axios_rate_limit_1.default(axios_1.default.create({
            withCredentials: true,
            auth: {
                username,
                password
            },
            headers: {
                "Content-Type": "application/json"
            },
            baseURL
        }), { maxRPS: 20 });
        const updateATFfile = (contents, sysId) => {
            const endpoint = "api/x_nuvo_sinc/pushATFfile";
            try {
                return client.post(endpoint, { file: contents, sys_id: sysId });
            }
            catch (e) {
                throw e;
            }
        };
        const updateRecord = (table, recordId, fields) => {
            if (table === "sys_atf_step") {
                updateATFfile(fields["inputs.script"], recordId);
            }
            const endpoint = `api/now/table/${table}/${recordId}`;
            return client.patch(endpoint, fields);
        };
        return {
            updateRecord
        };
    };
    exports.defaultClient = () => {
        const { SN_USER = "", SN_PASSWORD = "", SN_INSTANCE = "" } = process.env;
        return exports.snClient(`https://${SN_INSTANCE}/`, SN_USER, SN_PASSWORD);
    };
});
