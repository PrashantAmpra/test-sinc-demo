var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./commands", "yargs"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const commands_1 = require("./commands");
    const yargs_1 = __importDefault(require("yargs"));
    async function initCommands() {
        const sharedOptions = {
            logLevel: {
                default: "info"
            }
        };
        yargs_1.default
            .command(["dev", "d"], "Start Development Mode", sharedOptions, commands_1.devCommand)
            .command(["refresh", "r"], "Refresh Manifest and download new files since last refresh", sharedOptions, commands_1.refreshCommand)
            .command(["push [target]"], "[DESTRUCTIVE] Push all files from current local files to ServiceNow instance.", cmdArgs => {
            cmdArgs.options({
                ...sharedOptions,
                diff: {
                    alias: "d",
                    type: "string",
                    default: "",
                    describe: "Specify branch to do git diff against"
                },
                scopeSwap: {
                    alias: "ss",
                    type: "boolean",
                    default: false,
                    describe: "Will auto-swap to the correct scope for the files being pushed"
                },
                updateSet: {
                    alias: "us",
                    type: "string",
                    default: "",
                    describe: "Will create a new update set with the provided anme to store all changes into"
                },
                ci: {
                    type: "boolean",
                    default: false,
                    describe: "Will skip confirmation prompts during the push process"
                }
            });
            return cmdArgs;
        }, (args) => {
            commands_1.pushCommand(args);
        })
            .command("download <scope>", "Downloads a scoped application's files from ServiceNow. Must specify a scope prefix for a scoped app.", sharedOptions, (args) => {
            commands_1.downloadCommand(args);
        })
            .command("init", "Provisions an initial project for you", sharedOptions, commands_1.initCommand)
            .command("build", "Build application files locally", cmdArgs => {
            cmdArgs.options({
                ...sharedOptions,
                diff: {
                    alias: "d",
                    type: "string",
                    default: "",
                    describe: "Specify branch to do git diff against"
                }
            });
            return cmdArgs;
        }, (args) => {
            commands_1.buildCommand(args);
        })
            .command("deploy", "Deploy local build files to the scoped application", sharedOptions, commands_1.deployCommand)
            .command("status", "Get information about the connected instance", sharedOptions, commands_1.statusCommand)
            .help().argv;
    }
    exports.initCommands = initCommands;
});
