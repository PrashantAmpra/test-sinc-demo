var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Logger", "chalk"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Logger_1 = require("./Logger");
    const chalk_1 = __importDefault(require("chalk"));
    exports.log = console.log;
    function scopeCheckMessage(scopeCheck) {
        let sScope = chalk_1.default.blue(scopeCheck.sessionScope);
        let mScope = chalk_1.default.blue(scopeCheck.manifestScope);
        Logger_1.logger.error(`Your user's scope is set to ${sScope} but this project is configured for the ${mScope} scope. Please switch scopes in ServiceNow to continue.`);
    }
    exports.scopeCheckMessage = scopeCheckMessage;
    function devModeLog() {
        Logger_1.logger.info(`Dev mode started! Watching for changes...[${chalk_1.default.red("Press CTRL-C to Stop")}]\n`);
    }
    exports.devModeLog = devModeLog;
    function parseError(err) {
        return `${err.name}:
 ${err.message}
 Stack Trace:
 ${err.stack || "none"}`;
    }
    function logFilePush(context, res) {
        const { message, success } = res;
        const label = chalk_1.default.bold.blue;
        Logger_1.logger.info(chalk_1.default.underline("File Push Summary"));
        Logger_1.logger.info(`${label("When:\t")}${new Date().toLocaleTimeString()}`);
        Logger_1.logger.info(`${label("Table:\t")}${context.tableName}`);
        Logger_1.logger.info(`${label("Record:\t")}${context.name}`);
        Logger_1.logger.info(`${label("Field:\t")}${context.targetField}`);
        let status = chalk_1.default.green("Pushed 👍");
        if (!success) {
            status = chalk_1.default.red("Failed to push 👎");
        }
        Logger_1.logger.info(`${label("Status:\t")}${status}`);
        if (!success) {
            Logger_1.logger.error(message);
        }
        spacer();
    }
    exports.logFilePush = logFilePush;
    function multiLog(files, success, resultSet, successMessage, errorMessage, err) {
        if (success) {
            let fileNum = chalk_1.default.bold.blue(resultSet.filter(result => result).length + "");
            let message = chalk_1.default.green(`${fileNum} files ${successMessage}`);
            Logger_1.logger.info(message);
        }
        else {
            Logger_1.logger.error(errorMessage);
            if (err) {
                Logger_1.logger.error(parseError(err));
            }
        }
        spacer();
    }
    function logMultiFilePush(files, success, resultSet, err) {
        multiLog(files, success, resultSet, "successfully pushed to server", "Failed to push files to server", err);
    }
    exports.logMultiFilePush = logMultiFilePush;
    function logMultiFileBuild(files, success, resultSet, err) {
        multiLog(files, success, resultSet, "successfully built", "Failed to build files", err);
    }
    exports.logMultiFileBuild = logMultiFileBuild;
    function logDeploy(files, success, resultSet, err) {
        multiLog(files, success, resultSet, "successfully deployed", "Failed to deploy files", err);
    }
    exports.logDeploy = logDeploy;
    function spacer() {
        Logger_1.logger.info("");
    }
    exports.logPushResults = (results) => {
        const unsuccessful = results.filter(r => !r.success);
        const logr = Logger_1.logger.getInternalLogger();
        const label = (content) => chalk_1.default.bold.blue(content);
        const success = (content) => chalk_1.default.bold.green(content);
        const fail = (content) => chalk_1.default.bold.red(content);
        logr.info(`${label("Total Records:")} ${results.length}`);
        logr.info(`${label("Successful Pushes:")} ${success(results.length - unsuccessful.length + "")}`);
        logr.info(`${label("Failed Pushes:")} ${fail(unsuccessful.length + "")}`);
        if (unsuccessful.length === 0) {
            return;
        }
        Logger_1.logger.error("-".repeat(60));
        Logger_1.logger.error(fail("Error Summary"));
        Logger_1.logger.error("-".repeat(60));
        unsuccessful.forEach(({ message }, index) => {
            if (unsuccessful.length === 1) {
                logr.error(message);
            }
            logr.error(`${index + 1}. ${message}`);
        });
    };
});
