var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "winston", "chalk"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const winston_1 = __importStar(require("winston"));
    const chalk_1 = __importDefault(require("chalk"));
    class SincLogger {
        constructor() {
            this.logger = winston_1.default.createLogger(this.genLoggerOpts());
        }
        setLogLevel(level) {
            this.logger = winston_1.default.createLogger(this.genLoggerOpts(level));
        }
        getLogLevel() {
            return this.logger.level;
        }
        genLoggerOpts(level = "info") {
            return {
                format: winston_1.format.printf(info => {
                    return `${info.message}`;
                }),
                level,
                transports: [new winston_1.transports.Console()]
            };
        }
        info(text) {
            this.logger.info(chalk_1.default.blue(text));
        }
        error(text) {
            this.logger.error(chalk_1.default.red(text));
        }
        warn(text) {
            this.logger.warn(chalk_1.default.yellow(text));
        }
        success(text) {
            this.logger.info(chalk_1.default.green(text));
        }
        verbose(text) {
            this.logger.verbose(text);
        }
        debug(text) {
            this.logger.debug(text);
        }
        silly(text) {
            this.logger.silly(text);
        }
        getInternalLogger() {
            return this.logger;
        }
    }
    const loggerInst = new SincLogger();
    exports.logger = loggerInst;
});
