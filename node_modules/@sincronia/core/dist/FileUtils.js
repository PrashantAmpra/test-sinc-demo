var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "fs", "path", "./config"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const fs_1 = __importStar(require("fs"));
    const path_1 = __importDefault(require("path"));
    const config_1 = __importDefault(require("./config"));
    exports.SNFileExists = (parentDirPath) => async (file) => {
        try {
            const files = await fs_1.promises.readdir(parentDirPath);
            const reg = new RegExp(`${file.name}\..*$`);
            return !!files.find(f => reg.test(f));
        }
        catch (e) {
            return false;
        }
    };
    exports.writeSNFileCurry = (checkExists) => async (file, parentPath) => {
        const { name, type, content = "" } = file;
        // content can sometimes be null
        if (!content) {
            content === "";
        }
        const write = async () => {
            const fullPath = path_1.default.join(parentPath, `${name}.${type}`);
            return await fs_1.promises.writeFile(fullPath, content);
        };
        if (checkExists) {
            const exists = await exports.SNFileExists(parentPath)(file);
            if (!exists) {
                await write();
            }
        }
        else {
            write();
        }
    };
    exports.createDirRecursively = async (path) => {
        await fs_1.promises.mkdir(path, { recursive: true });
    };
    exports.pathExists = async (path) => {
        try {
            await fs_1.promises.access(path, fs_1.default.constants.F_OK);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    exports.appendToPath = (prefix) => (suffix) => path_1.default.join(prefix, suffix);
    /**
     * Detects if a path is under a parent directory
     * @param parentPath full path to parent directory
     * @param potentialChildPath full path to child directory
     */
    exports.isUnderPath = (parentPath, potentialChildPath) => {
        const parentTokens = parentPath.split(path_1.default.sep);
        const childTokens = potentialChildPath.split(path_1.default.sep);
        return parentTokens.every((token, index) => token === childTokens[index]);
    };
    const getFileExtension = (filePath) => {
        try {
            return ("." +
                path_1.default
                    .basename(filePath)
                    .split(".")
                    .slice(1)
                    .join("."));
        }
        catch (e) {
            return "";
        }
    };
    const getTargetFieldFromPath = (filePath, table, ext) => {
        return table === "sys_atf_step"
            ? "inputs.script"
            : path_1.default.basename(filePath, ext);
    };
    exports.getFileContextFromPath = (filePath) => {
        const ext = getFileExtension(filePath);
        const [tableName, recordName] = path_1.default
            .dirname(filePath)
            .split(path_1.default.sep)
            .slice(-2);
        const targetField = getTargetFieldFromPath(filePath, tableName, ext);
        const manifest = config_1.default.getManifest();
        if (!manifest) {
            throw new Error("No manifest has been loaded!");
        }
        const { tables, scope } = manifest;
        try {
            const { records } = tables[tableName];
            const record = records[recordName];
            const { files, sys_id } = record;
            const field = files.find(file => file.name === targetField);
            if (!field) {
                return undefined;
            }
            return {
                filePath,
                ext,
                sys_id,
                name: recordName,
                scope,
                tableName,
                targetField
            };
        }
        catch (e) {
            return undefined;
        }
    };
    exports.toAbsolutePath = (p) => path_1.default.isAbsolute(p) ? p : path_1.default.join(process.cwd(), p);
    exports.isDirectory = async (p) => {
        const stats = await fs_1.promises.stat(p);
        return stats.isDirectory();
    };
    exports.getPathsInPath = async (p) => {
        if (!exports.isUnderPath(config_1.default.getSourcePath(), p)) {
            return [];
        }
        const isDir = await exports.isDirectory(p);
        if (!isDir) {
            return [p];
        }
        else {
            const childPaths = await fs_1.promises.readdir(p);
            const pathPromises = childPaths.map(childPath => exports.getPathsInPath(path_1.default.resolve(p, childPath)));
            const stackedPaths = await Promise.all(pathPromises);
            return stackedPaths.flat();
        }
    };
    exports.summarizeFile = (ctx) => {
        const { tableName, name: recordName, sys_id } = ctx;
        return `${tableName}/${recordName}/${sys_id}`;
    };
    exports.writeSNFileIfNotExists = exports.writeSNFileCurry(true);
    exports.writeSNFileForce = exports.writeSNFileCurry(false);
    exports.writeFileForce = fs_1.promises.writeFile;
});
