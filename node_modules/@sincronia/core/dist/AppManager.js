var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "fs", "child_process", "path", "./config", "./genericUtils", "./Logger", "./logMessages", "inquirer", "./server", "./constants", "./PluginManager", "./appUtils", "progress"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const fs_1 = __importDefault(require("fs"));
    const cp = __importStar(require("child_process"));
    const path_1 = __importDefault(require("path"));
    const config_1 = __importDefault(require("./config"));
    const Utils = __importStar(require("./genericUtils"));
    const Logger_1 = require("./Logger");
    const logMessages_1 = require("./logMessages");
    const inquirer_1 = __importDefault(require("inquirer"));
    const server_1 = require("./server");
    const constants_1 = require("./constants");
    const PluginManager_1 = __importDefault(require("./PluginManager"));
    const AppUtils = __importStar(require("./appUtils"));
    const progress_1 = __importDefault(require("progress"));
    const fsp = fs_1.default.promises;
    class AppManager {
        constructor() { }
        async writeManifestFile(man) {
            return fsp.writeFile(config_1.default.getManifestPath(), JSON.stringify(man, null, 2));
        }
        async downloadWithFiles(scope) {
            try {
                let answers = await inquirer_1.default.prompt([
                    {
                        type: "confirm",
                        name: "confirmed",
                        message: "Downloading will overwrite manifest and files. Are you sure?",
                        default: false
                    }
                ]);
                if (!answers["confirmed"]) {
                    return;
                }
                Logger_1.logger.info("Downloading manifest and files...");
                let man = await server_1.getManifestWithFiles(scope);
                Logger_1.logger.info("Creating local files from manifest...");
                await AppUtils.processManifest(man, true);
                Logger_1.logger.success("Download complete ✅");
            }
            catch (e) {
                Logger_1.logger.error("Encountered error while performing download ❌");
                Logger_1.logger.error(e.toString());
            }
        }
        async syncManifest() {
            try {
                let curManifest = await config_1.default.getManifest();
                if (!curManifest) {
                    throw new Error("No manifest file loaded!");
                }
                try {
                    Logger_1.logger.info("Downloading fresh manifest...");
                    let newManifest = await server_1.getManifest(curManifest.scope);
                    Logger_1.logger.info("Writing new manifest file...");
                    this.writeManifestFile(newManifest);
                    Logger_1.logger.info("Finding and creating missing files...");
                    await AppUtils.processMissingFiles(newManifest);
                    config_1.default.updateManifest(newManifest);
                    Logger_1.logger.success("Refresh complete! ✅");
                }
                catch (e) {
                    Logger_1.logger.error("Encountered error while refreshing! ❌");
                    Logger_1.logger.error(e.toString());
                }
            }
            catch (e) {
                Logger_1.logger.error("Encountered error while refreshing! ❌");
                Logger_1.logger.error(e.toString());
            }
        }
        async getFilePaths(pathString) {
            let pathPromises = pathString
                .split(constants_1.PATH_DELIMITER)
                .filter(cur => {
                //make sure it isn't blank
                if (cur && cur !== "") {
                    //make sure it exists
                    let resolvedPath = path_1.default.resolve(process.cwd(), cur);
                    return fs_1.default.existsSync(resolvedPath);
                }
                else {
                    return false;
                }
            })
                .map(async (cur) => {
                let resolvedPath = path_1.default.resolve(process.cwd(), cur);
                let stats = await fsp.stat(resolvedPath);
                if (stats.isDirectory()) {
                    return await this.loadList(resolvedPath);
                }
                else {
                    return [resolvedPath];
                }
            });
            let pathArrays = await Promise.all(pathPromises);
            let paths = pathArrays.reduce((acc, cur) => {
                return acc.concat(cur);
            }, []);
            Logger_1.logger.silly(`${paths.length} paths found...`);
            Logger_1.logger.silly(JSON.stringify(paths, null, 2));
            return paths;
        }
        async loaddir(dirPath, list) {
            try {
                let files = await fsp.readdir(dirPath);
                for (let f of files) {
                    let filep = path_1.default.join(dirPath, f);
                    let stats = await fsp.stat(filep);
                    if (stats.isDirectory()) {
                        await this.loaddir(filep, list);
                    }
                    else {
                        list.push(filep);
                    }
                }
            }
            catch (e) {
                throw e;
            }
        }
        async parseFileParams(files) {
            return await Utils.getParsedFilesPayload(files);
        }
        async loadList(directory) {
            let list = [];
            await this.loaddir(directory, list);
            return list;
        }
        async canPush() {
            const targetServer = process.env.SN_INSTANCE || "";
            if (!targetServer) {
                Logger_1.logger.error("No server configured for push!");
                return false;
            }
            try {
                let answers = await inquirer_1.default.prompt([
                    {
                        type: "confirm",
                        name: "confirmed",
                        message: "Pushing will overwrite code in your instance. Are you sure?",
                        default: false
                    }
                ]);
                if (!answers["confirmed"]) {
                    return false;
                }
                return true;
            }
            catch (e) {
                return false;
            }
        }
        async buildFile(filePayload, source, build) {
            const { filePath, targetField } = filePayload;
            const fileContents = await PluginManager_1.default.getFinalFileContents(filePayload);
            let ext = "js";
            if (targetField === "css")
                ext = "css";
            if (targetField === "html")
                ext = "html";
            let pathArr = path_1.default
                .join(build, path_1.default.relative(source, filePath))
                .split(".")
                .slice(0, -1);
            pathArr.push(ext);
            const newPath = pathArr.join(".");
            const folderPath = path_1.default.dirname(newPath);
            try {
                await fsp.access(folderPath, fs_1.default.constants.F_OK);
            }
            catch (e) {
                await fsp.mkdir(folderPath, { recursive: true });
            }
            try {
                await fsp.writeFile(newPath, fileContents);
            }
            catch (e) {
                throw e;
            }
        }
        async buildFiles() {
            const resultSet = [];
            try {
                let source = config_1.default.getSourcePath();
                let build = config_1.default.getBuildPath();
                let paths = await this.getFilePaths(source);
                Logger_1.logger.info(`Building ${paths.length} files`);
                let fileContexts = await this.parseFileParams(paths);
                let progBar;
                if (Logger_1.logger.getLogLevel() === "info") {
                    progBar = new progress_1.default(":bar :current/:total (:percent)", {
                        total: fileContexts.length,
                        width: 60
                    });
                }
                try {
                    let resultsPromises = fileContexts.map(ctx => {
                        const pushPromise = this.buildFile(ctx, source, build);
                        pushPromise
                            .then(() => {
                            if (progBar) {
                                progBar.tick();
                            }
                        })
                            .catch(e => {
                            if (progBar) {
                                progBar.tick();
                            }
                            return false;
                        });
                        return true;
                    });
                    const results = await Promise.all(resultsPromises);
                    resultSet.push(...results);
                    logMessages_1.logMultiFileBuild(fileContexts, true, resultSet);
                }
                catch (e) {
                    logMessages_1.logMultiFileBuild(fileContexts, false, [], e);
                }
            }
            catch (e) {
                throw e;
            }
        }
        async canDeploy() {
            const targetServer = process.env.SN_INSTANCE || "";
            if (!targetServer) {
                Logger_1.logger.error("No server configured for deploy!");
                return false;
            }
            try {
                let answers = await inquirer_1.default.prompt([
                    {
                        type: "confirm",
                        name: "confirmed",
                        message: "Deploying will overwrite code in your instance. Are you sure?",
                        default: false
                    }
                ]);
                if (!answers["confirmed"]) {
                    return false;
                }
                return true;
            }
            catch (e) {
                return false;
            }
        }
        async deployFiles(skipPrompt = false) {
            try {
                let paths = config_1.default.getDiffFile().changed;
                let deployDiff = false;
                if (paths && paths.length > 0) {
                    let answers = await inquirer_1.default.prompt([
                        {
                            type: "confirm",
                            name: "confirmed",
                            message: "Would you like to deploy only files changed in your diff file?",
                            default: false
                        }
                    ]);
                    if (answers["confirmed"])
                        deployDiff = true;
                }
                if (!deployDiff) {
                    const build = config_1.default.getBuildPath();
                    paths = await this.getFilePaths(build);
                }
                let fileContexts = await this.parseFileParams(paths);
                Logger_1.logger.info(`${fileContexts.length} files to deploy...`);
                Logger_1.logger.silly(JSON.stringify(fileContexts.map(ctx => ctx.filePath), null, 2));
                if (skipPrompt || (await this.canDeploy())) {
                    try {
                        const resultSet = await server_1.deployFiles(process.env.SN_INSTANCE || "", fileContexts);
                        logMessages_1.logDeploy(fileContexts, true, resultSet);
                    }
                    catch (e) {
                        logMessages_1.logDeploy(fileContexts, false, [], e);
                    }
                }
            }
            catch (e) {
                throw e;
            }
        }
        async checkScope(swapScope) {
            try {
                let man = config_1.default.getManifest();
                if (man) {
                    let scopeObj = await server_1.getCurrentScope();
                    if (scopeObj.scope === man.scope) {
                        return {
                            match: true,
                            sessionScope: scopeObj.scope,
                            manifestScope: man.scope
                        };
                    }
                    else if (swapScope) {
                        const swappedScopeObj = await this.swapScope(man.scope);
                        return {
                            match: swappedScopeObj.scope === man.scope,
                            sessionScope: swappedScopeObj.scope,
                            manifestScope: man.scope
                        };
                    }
                    else {
                        return {
                            match: false,
                            sessionScope: scopeObj.scope,
                            manifestScope: man.scope
                        };
                    }
                }
                //first time case
                return {
                    match: true,
                    sessionScope: "",
                    manifestScope: ""
                };
            }
            catch (e) {
                throw e;
            }
        }
        async swapScope(currentScope) {
            try {
                const scopeId = await server_1.getScopeId(currentScope);
                await server_1.swapServerScope(scopeId);
                const scopeObj = await server_1.getCurrentScope();
                return scopeObj;
            }
            catch (e) {
                throw e;
            }
        }
        gitDiff(target) {
            return new Promise((resolve, reject) => {
                const cmdStr = `git diff --name-status ${target}...`;
                cp.exec(cmdStr, (err, stdout, stderr) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(this.formatGitFiles(stdout.trim()));
                    }
                });
            });
        }
        async writeDiff(files) {
            let paths = await this.getFilePaths(files);
            fsp.writeFile(config_1.default.getDiffPath(), JSON.stringify({ changed: paths }));
        }
        async formatGitFiles(gitFiles) {
            const baseRepoPath = await this.getRepoRootDir();
            const workspaceDir = process.cwd();
            const fileSplit = gitFiles.split(/\r?\n/);
            const fileArray = [];
            fileSplit.forEach(diffFile => {
                if (diffFile !== "") {
                    const modCode = diffFile.charAt(0);
                    if (modCode !== "D") {
                        const filePath = diffFile.substr(1, diffFile.length - 1).trim();
                        if (this.isValidScope(filePath, workspaceDir, baseRepoPath)) {
                            Logger_1.logger.info(diffFile);
                            const absFilePath = path_1.default.resolve(baseRepoPath, filePath);
                            fileArray.push(absFilePath);
                        }
                    }
                }
            });
            return fileArray.join(constants_1.PATH_DELIMITER);
        }
        getRepoRootDir() {
            return new Promise((resolve, reject) => {
                cp.exec("git rev-parse --show-toplevel", (err, stdout, stderr) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(stdout.trim());
                    }
                });
            });
        }
        isValidScope(file, scope, baseRepoPath) {
            const relativePath = path_1.default.relative(baseRepoPath, scope);
            return file.startsWith(relativePath) ? true : false;
        }
        /**
         * Creates a new update set and assigns it to the current user.
         * @param updateSetName - does not create update set if value is blank
         * @param skipPrompt - will not prompt user to verify update set name
         *
         */
        async createAndAssignUpdateSet(updateSetName = "", skipPrompt = false) {
            if (updateSetName !== "") {
                if (await this.promptForNewUpdateSet(updateSetName, skipPrompt)) {
                    const updateSetSysId = await server_1.createUpdateSet(updateSetName);
                    Logger_1.logger.debug(`New Update Set Created(${updateSetName}) sys_id:${updateSetSysId}`);
                    const userSysId = await server_1.getUserSysId();
                    const curUpdateSetUserPrefId = await server_1.getCurrentUpdateSetUserPref(userSysId);
                    if (curUpdateSetUserPrefId !== "") {
                        await server_1.updateCurrentUpdateSetUserPref(updateSetSysId, curUpdateSetUserPrefId);
                    }
                    else {
                        await server_1.createCurrentUpdateSetUserPref(updateSetSysId, userSysId);
                    }
                }
                else {
                    process.exit(0);
                }
            }
        }
        async promptForNewUpdateSet(updateSetName, skipPrompt = false) {
            try {
                if (skipPrompt)
                    return true;
                let answers = await inquirer_1.default.prompt([
                    {
                        type: "confirm",
                        name: "confirmed",
                        message: `A new Update Set "${updateSetName}" will be created for these pushed changes. Do you want to proceed?`,
                        default: false
                    }
                ]);
                if (!answers["confirmed"]) {
                    return false;
                }
                return true;
            }
            catch (e) {
                return false;
            }
        }
    }
    exports.default = new AppManager();
});
