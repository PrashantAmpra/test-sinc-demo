var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@babel/types", "./sanitizerHelper"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const t = __importStar(require("@babel/types"));
    const sanitizerHelper_1 = require("./sanitizerHelper");
    function default_1() {
        return {
            visitor: {
                Identifier(path) {
                    //replaces references to __proto__, illegal in SN
                    if (path.node.name === "__proto__") {
                        path.node.name = "__proto_sn__";
                    }
                },
                //if a reserved word is used as a property, move it to a bracket syntax
                MemberExpression(path) {
                    if (path.node.property.type === "Identifier" &&
                        sanitizerHelper_1.isReservedWord(path.node.property.name) &&
                        !path.node.computed) {
                        let replacement = t.memberExpression(path.node.object, t.stringLiteral(path.node.property.name), true);
                        path.replaceWith(replacement);
                    }
                }
            }
        };
    }
    exports.default = default_1;
});
